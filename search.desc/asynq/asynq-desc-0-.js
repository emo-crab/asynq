searchState.loadedDescShard("asynq", 0, "Asynq\n经纪人模块 Broker module\n客户端模块 Client module\nLifecycle 模块 Lifecycle module\n配置模块 Configuration module\n错误处理模块 Error handling module\n检查器模块 Inspector module\nProtocol related code. source: asynq.proto\n经纪人模块 Broker module\nRedis 配置和连接管理模块 Redis configuration and …\n周期性任务调度器（Scheduler）\nServeMux - 任务路由多路复用器 ServeMux - Task …\n服务器模块 Server module\n任务模块 Task module\n活跃状态 Active\n…\n已关闭状态 Closed\n新建状态 New\n服务器状态 Server state\n已停止状态 Stopped\n将任务添加到组中进行聚合 - Go: AddToGroup Add …\n将唯一任务添加到组中进行聚合 - Go: …\n检查聚合条件是否满足 - Go: AggregationCheck …\n归档任务 - Go: Archive Archive a task - Go: Archive\n转换为字符串 Convert to string\n订阅任务取消事件 - Go: CancelationPubSub Subscribe …\n清除服务器状态 - Go: ClearServerState Clear server …\n关闭连接 - Go: Close Close connection - Go: Close\n删除聚合集合 - Go: DeleteAggregationSet Delete an …\n删除过期的完成任务 - Go: …\n从队列中出队任务 - Go: Dequeue Dequeue a task from …\n完成任务 - Go: Done Mark a task as done - Go: Done\n将任务加入队列 - Go: Enqueue Enqueue a task - Go: …\n将唯一任务加入队列 - Go: EnqueueUnique Enqueue a …\n延长任务处理租约 - Go: ExtendLease Extend task …\n将调度的任务转发到等待队列 - Go: …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRedis 键名常量 - 与 Go 版本保持兼容 Redis key …\n获取队列中的任务组列表 - Go: ListGroups Get the …\n列出租约已过期的任务 - Go: ListLeaseExpired List …\n标记任务为完成状态 - Go: MarkAsComplete Mark a …\nPing Redis 连接 - Go: Ping Ping Redis connection - Go: …\n发布任务取消通知 - Go: PublishCancelation Publish …\n读取聚合集合中的任务 - Go: ReadAggregationSet …\n回收过期的聚合集合 - Go: …\n重新排队任务进行重试 - Go: Requeue Requeue a …\n重试失败的任务 - Go: Retry Retry a failed task - …\n调度任务在指定时间执行 - Go: Schedule Schedule …\n调度唯一任务在指定时间执行 - Go: …\n写入任务结果 - Go: WriteResult Write task result - …\n写入服务器状态 - Go: WriteServerState Write server …\n默认最大重试次数\n默认队列名称\n默认任务超时时间\n版本信息\n全局 Redis 键 Global Redis keys\n任务正在被处理 Task is being processed\n任务在组中等待聚合 Task is waiting for …\n任务被归档并存储以供检查 Task is archived and …\n任务处理成功并保留到保留 TTL 过期 Task is …\n任务准备好被处理 Task is ready to be processed\n任务之前失败了，安排在将来某个时间重试 …\n任务被安排在将来某个时间处理 Task is …\n任务状态 Task state\n生成活跃任务键 - 对应 Go 的 ActiveKey Generate …\n生成聚合任务键（向后兼容） - 映射到组键 …\n生成聚合集合键 - 对应 Go 的 AggregationSetKey …\n生成所有聚合集合键 - 对应 Go 的 …\n生成所有组键 - 对应 Go 的 AllGroups Generate all …\n生成已归档任务键 - 对应 Go 的 ArchivedKey …\n将任务状态转换为字符串 Convert task state to …\n生成已完成任务键 - 对应 Go 的 CompletedKey …\n生成按日失败数键 - 对应 Go 的 FailedKey …\n生成失败总数键 - 对应 Go 的 FailedTotalKey …\nReturns the argument unchanged.\n生成组键 - 对应 Go 的 GroupKey Generate group key - …\n生成组键前缀 Generate group key prefix\n生成组键（别名 all_groups） Generate groups key …\nCalls <code>U::from(self)</code>.\n生成租约键 - 对应 Go 的 LeaseKey Generate lease …\n生成暂停键 - 对应 Go 的 PausedKey Generate paused …\n生成队列键 - 对应 Go 的 PendingKey Generate queue …\n生成按日处理数键 - 对应 Go 的 ProcessedKey …\n生成处理总数键 - 对应 Go 的 ProcessedTotalKey …\n生成队列键前缀 - 与 Go 版本兼容: asynq:{qname}:\n生成重试任务键 - 对应 Go 的 RetryKey Generate …\n生成调度任务键 - 对应 Go 的 ScheduledKey …\n生成调度器条目键 - 对应 Go 的 …\n生成调度器历史键 - 对应 Go 的 …\n生成服务器信息键 - 对应 Go 的 ServerInfoKey …\n完整的服务器信息键生成函数 - 对应 Go 的 …\n生成任务键 Generate task key\n生成任务键前缀 Generate task key prefix\n生成唯一键 - 对应 Go 的 UniqueKey，使用 MD5 …\n生成工作者键 - 对应 Go 的 WorkersKey Generate …\n完整的工作者键生成函数 - 对应 Go 的 …\nAsynq 客户端，负责将任务排队 Asynq client, …\n将任务添加到组中进行聚合 Add a task to a group …\n将唯一任务添加到组中进行聚合 Add a unique …\n关闭客户端 Close the client\n将任务加入队列立即处理 Enqueue a task for …\n在指定延迟后处理任务 Enqueue a task to be …\n将唯一任务加入队列 Enqueue a unique task\nReturns the argument unchanged.\n获取 RedisBroker 实例 Get the RedisBroker instance\nCalls <code>U::from(self)</code>.\n创建新的客户端实例 Create a new client instance\nPing Redis 连接 Ping the Redis connection\n调度任务在指定时间处理 Schedule a task for …\n调度唯一任务在指定时间处理 Schedule a unique …\n使用指定配置创建客户端实例 Create a client …\nLifecycle trait - 组件生命周期管理接口 Lifecycle …\nAggregator 模块 Aggregator module\nForwarder 模块 Forwarder module\nHealthcheck 模块 Healthcheck module\nHeartbeat 模块 Heartbeat module\n检查组件是否已完成 Check if the component is done\nJanitor 模块 Janitor module\nPeriodic Task Manager 模块 Periodic Task Manager module\n处理器模块 Processor module\nRecoverer 模块 Recoverer module\n关闭组件 Shutdown the component\n启动组件 Start the component\nSubscriber 模块 Subscriber module\nAggregator - 负责聚合任务到组中进行批量处理 …\nAggregator 配置 Aggregator configuration\nGroupAggregator trait - 聚合一组任务为一个任务 …\n函数式 GroupAggregator 适配器 Functional …\n聚合给定组中的任务，返回聚合后的新任务 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n组宽限期 Group grace period\n组聚合器 - 将一组任务聚合为一个任务 Group …\n检查间隔 Check interval\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查是否已完成 Check if done\n最大延迟 Maximum delay\n最大组大小 Maximum group size\n创建新的函数式 GroupAggregator Create a new …\n创建新的 Aggregator Create a new Aggregator\n队列列表 Queue list\n停止 Aggregator Stop the Aggregator\n启动 Aggregator Start the Aggregator\nForwarder - …\nForwarder 配置 Forwarder configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\n检查间隔 Check interval\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查是否已完成 Check if done\n创建新的 Forwarder Create a new Forwarder\n队列列表 Queue list\n停止 Forwarder Stop the Forwarder\n启动 Forwarder Start the Forwarder\nHealthcheck - 负责定期执行健康检查 Healthcheck - …\nHealthcheck 配置 Healthcheck configuration\nHealthcheckFunc - 健康检查函数类型 HealthcheckFunc …\nReturns the argument unchanged.\nReturns the argument unchanged.\n健康检查间隔 Health check interval\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查是否已完成 Check if done\n检查服务器是否健康 Check if server is healthy\n创建新的 Healthcheck Create a new Healthcheck\n停止 Healthcheck Stop the Healthcheck\n启动 Healthcheck Start the Healthcheck\n设置自定义健康检查函数 Set custom health check …\n心跳器，封装心跳循环上下文 Heartbeat, …\n静态元数据（不随心跳周期变化） Static …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查是否已停止 Check if it has stopped\n请求心跳循环终止 Request the termination of the …\n启动心跳循环 Start the heartbeat loop\nJanitor - 负责定期清理过期任务和死亡服务器 …\nJanitor 配置 Janitor configuration\n批量大小 Batch size\nReturns the argument unchanged.\nReturns the argument unchanged.\n清理间隔 Cleanup interval\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查是否已完成 Check if done\n创建新的 Janitor Create a new Janitor\n队列列表 Queue list\n停止 Janitor Stop the Janitor\n启动 Janitor Start the Janitor\n周期性任务配置 Periodic task configuration\nPeriodic Task Config Provider trait …\nPeriodic Task Manager - 管理周期性任务 Periodic …\nPeriodic Task Manager 配置 Periodic Task Manager …\n生成配置的唯一键（包含 payload 的哈希） …\nCron 表达式 Cron expression\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取周期性任务配置列表 Get list of periodic …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查是否已完成 Check if done\n创建新的 Periodic Task Manager Create a new Periodic …\n创建周期性任务配置 Create periodic task …\n任务载荷 Task payload\n队列名称 Queue name\n停止 Periodic Task Manager Stop the Periodic Task Manager\n启动 Periodic Task Manager Start the Periodic Task …\n同步间隔 Sync interval\n任务唯一标识符（用于区分不同配置） Unique …\n转换为 PeriodicTask Convert to PeriodicTask\n任务取消追踪结构 Task cancellation tracking …\n处理器 - 负责从队列中取出任务并处理 …\n处理器参数 Processor parameters\n添加任务取消令牌 Add task cancellation token\n取消指定的任务 Cancel specified task\n获取任务取消追踪器的克隆 Get a clone of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查是否为空 Check if empty\n获取正在运行的任务数量 Get the number of …\n创建新的处理器 Create a new processor\n创建新的 Cancellations 实例 Create a new …\n移除任务取消令牌 Remove task cancellation token\n关闭处理器并等待所有工作者完成 Shutdown the …\n启动处理器 Start the processor\n停止处理器（不等待工作者完成） Stop the …\nRecoverer - 负责恢复孤儿任务 Recoverer - …\nRecoverer 配置 Recoverer configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\n恢复间隔 Recovery interval\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查是否已完成 Check if done\n创建新的 Recoverer Create a new Recoverer\n队列列表 Queue list\n停止 Recoverer Stop the Recoverer\n启动 Recoverer Start the Recoverer\n服务器状态变化事件 Server state changed event\nSubscriber - 负责订阅任务事件和通知 Subscriber …\n订阅者配置 Subscriber configuration\n订阅事件类型 Subscription event type\n任务取消事件 Task cancelled event\n任务完成事件 Task completed event\n任务排队事件 Task enqueued event\n任务失败事件 Task failed event\n任务重试事件 Task retried event\n任务开始处理事件 Task processing started event\n缓冲区大小 Buffer size\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查是否已完成 Check if done\n创建新的 Subscriber Create a new Subscriber\n发布事件 Publish event\n停止 Subscriber Stop the Subscriber\n启动 Subscriber Start the Subscriber\n获取事件接收器 Get event receiver\n客户端配置 Client configuration\n错误处理函数类型 Error handler function type\n健康检查函数类型 Health check function type\n重试延迟函数类型 Retry delay function type\n服务器配置 Server configuration\n添加队列 Add a queue\n设置并发数 Set the number of concurrent workers\n并发工作者数量 Number of concurrent workers\n设置连接超时时间 Set the connection timeout\n连接超时时间 Connection timeout\n默认重试延迟函数 Default retry delay function\n设置延迟任务检查间隔 Set the delayed task check …\n延迟任务检查间隔 Delayed task check interval\n启用组聚合器 Enable group aggregator\n启用周期性任务管理器 Enable periodic task manager\nReturns the argument unchanged.\nReturns the argument unchanged.\n是否启用组聚合器 Whether to enable group aggregator\n设置组宽限期 Set the group grace period\n组宽限期 Group grace period\n设置组最大延迟 Set the maximum group delay\n组最大延迟 Maximum group delay\n设置组最大大小 Set the maximum group size\n组最大大小 Maximum group size\n设置健康检查间隔 Set the health check interval\n健康检查间隔 Health check interval\n心跳间隔 Heartbeat interval\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n设置清理任务批量大小 Set the janitor batch size\n清理任务批量大小 Janitor batch size\n设置清理任务间隔 Set the janitor interval\n清理任务间隔 Janitor interval\n设置最大重试次数 Set the maximum number of retries\n最大重试次数 Maximum number of retries\n创建新的服务器配置 Create a new server …\n创建新的客户端配置 Create a new client …\n设置周期性任务管理器检查间隔 Set periodic …\n周期性任务管理器检查间隔 Periodic task manager …\n是否启用周期性任务管理器 Whether to enable …\n设置队列配置 Set the queue configuration\n队列配置，键为队列名称，值为优先级 Queue …\n设置请求超时时间 Set the request timeout\n请求超时时间 Request timeout\n设置重试间隔 Set the retry interval\n重试间隔 Retry interval\n设置关闭超时时间 Set the shutdown timeout\n关闭超时时间 Shutdown timeout\n设置严格优先级 Set strict priority\n是否使用严格优先级 Whether to use strict priority\n设置任务检查间隔 Set the task check interval\n任务检查间隔 Task check interval\n验证配置 Validate the configuration\n取消错误 Cancellation error\n配置错误 Configuration error\nContains the error value\nAsynq 错误类型 Asynq error type\n无效的队列名称 Invalid queue name\n无效的任务类型 Invalid task type\nIO 错误 IO error\n未实现错误 Not implemented error\nContains the success value\n其他错误 Other error\nProtocol Buffer 解码错误 Protocol buffer decoding error\nProtocol Buffer 编码错误 Protocol buffer encoding error\n队列错误 Queue error\nRedis 连接错误 Redis connection error\nAsynq 库的结果类型 Result type for the Asynq library\n特殊的撤销任务错误包装器 Special revoke task …\n服务器已关闭 Server closed\n服务器已在运行 Server is already running\n特殊的跳过重试错误包装器 Special skip retry …\n任务重复错误 Task already exists error\n任务 ID 冲突错误 Task ID conflict error\n任务未找到错误 Task not found error\n超时错误 Timeout error\n创建配置错误 Create a configuration error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查是否为致命错误 Check if the error is fatal\n检查是否为重试错误 Check if the error is retriable\n创建新的跳过重试错误 Create a new skip retry …\n创建新的撤销任务错误 Create a new revoke task …\n创建其他错误 Create another type of error\n创建队列错误 Create a queue error\n队列检查器，用于检查和管理队列及任务 …\n归档所有聚合任务 (Go: ArchiveAllAggregatingTasks) …\n归档所有等待任务 (Go: ArchiveAllPendingTasks) …\n归档所有重试任务 (Go: ArchiveAllRetryTasks) …\n归档所有已调度任务 (Go: ArchiveAllScheduledTasks) …\n归档单个任务 (Go: ArchiveTask) Archive a single task …\n取消处理中的任务 (Go: CancelProcessing) Cancel a …\n删除所有活跃任务 (便利方法) Delete all active …\n删除所有归档任务 Delete all archived tasks\n删除所有等待任务 Delete all pending tasks\n删除所有重试任务 Delete all retry tasks\n删除所有调度任务 Delete all scheduled tasks\n删除过期的完成任务 Delete expired completed tasks\n删除队列 (Go: DeleteQueue) Delete a queue (Go: …\n删除任务 Delete a task\nReturns the argument unchanged.\n兼容原 API：从已存在的 Broker Compatible with …\n获取所有队列的统计信息 Get statistics for all …\n获取队列中的任务组列表 Get the list of task …\n获取历史统计信息 Get historical statistics\n获取队列信息 Get queue information\n获取队列统计信息 Get queue statistics\n获取所有队列名称 Get all queue names\n获取服务器信息 Get server information\n获取服务器列表 Get the list of servers\n获取任务信息（若不存在返回 TaskNotFound） …\n获取任务结果 Get the result of a task\n获取历史统计信息 (Go: History - 别名方法) Get …\nCalls <code>U::from(self)</code>.\n检查队列是否暂停 Check if a queue is paused\n列出活跃任务 (Go: ListActiveTasks) List active tasks …\n列出聚合中任务 (Go: ListAggregatingTasks) List …\n列出已归档任务 (Go: ListArchivedTasks) List …\n列出已完成任务 (Go: ListCompletedTasks) List …\n列出等待中任务 (Go: ListPendingTasks) List pending …\n分页列出等待中任务 List pending tasks with …\n列出重试任务 (Go: ListRetryTasks) List retry tasks …\n列出已调度任务 (Go: ListScheduledTasks) List …\n列出指定状态的任务 List tasks with the specified …\n通过 RedisConnectionType 创建 Inspector Create via …\n暂停队列 Pause a queue\n重新排队所有归档任务 Requeue all archived tasks\n重新排队所有重试任务 Requeue all retry tasks\n重新排队所有调度任务 Requeue all scheduled tasks\n运行所有归档任务 (Go: RunAllArchivedTasks - …\n运行所有重试任务 (Go: RunAllRetryTasks - 等价于 …\n运行所有已调度任务 (Go: RunAllScheduledTasks - …\n运行单个任务 (Go: RunTask) Run a single task (Go: …\n恢复队列 Resume a queue\nSchedulerEnqueueEvent 保存调度器入队事件的信息\nSchedulerEntry …\nServerInfo 保存正在运行的服务器信息\nTaskMessage …\nWorkerInfo 保存正在运行的工作者信息\nNumber of workers currently processing tasks.\nTime when the task completed in success in Unix time, the …\nMaximum number of concurrency this server will use.\nDeadline specifies the deadline for the task in Unix time, …\nDeadline by which the worker needs to complete processing …\nOptions used to enqueue the periodic task.\nTime the task was enqueued.\nError message from the last failure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGroupKey is a name of the group used for task aggregation. …\nHost machine the server is running on.\nHost matchine this worker is running on.\nUnique identifier for the task.\nIdentifier of the scheduler entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTime of last failure in Unix time, the number of seconds …\nNext time the task will be enqueued.\nPayload 保存处理任务所需的数据\nPID of the server process.\nPID of the process in which this worker is running.\nLast time the task was enqueued. Zero time if task was …\nName of the queue to which this task belongs.\nName of the queue the task the worker is processing …\nList of queue names with their priorities. The server will …\nRetention period specified in a number of seconds. The …\nNumber of times this task has been retried so far.\nMax number of retries for this task.\nUnique identifier for this server.\nID of the server in which this worker is running.\nPeriodic schedule spec of the entry.\nTime this server was started.\nTime this worker started processing the task.\nStatus indicates the status of the server.\nIf set, the server will always consume tasks from a queue …\nID of the task this worker is processing.\nID of the task that was enqueued.\nPayload of the task this worker is processing.\nTask payload of the periodic task.\nType of the task this worker is processing.\nTask type of the periodic task.\nTimeout specifies timeout in seconds. Use zero to indicate …\nType 表示要执行的任务类型\nUniqueKey holds the redis key used for uniqueness lock for …\nRedis 经纪人实现 Redis broker implementation\nRedis Lua 脚本模块\nPagination specifies the page size and page number for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPage number starting from zero. 从零开始的页面编号\nNumber of items in the page. 每页的项目数\nReturns the start index for the current page. …\nReturns the stop index for the current page. …\n自定义延迟函数（重试次数 -&gt; 延迟时间）\n按自定义键限制 Custom key\n指数退避\n固定延迟\n线性退避\n按队列限制 Per queue\n按任务类型限制 Per task type\n速率限制配置 Rate limit configuration\n速率限制类型 Rate limit type\n重试策略\n任务选项\n计算重试延迟\n创建自定义键的速率限制\n任务截止时间\n默认指数退避策略\n默认线性退避策略\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n生成速率限制键\n任务组\n组聚合宽限期\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n限制键（如果为空则使用任务类型） Limit key …\n限制数量 Limit count\n限制类型 Type of rate limit\n最大重试次数\n从字符串解析选项类型，兼容 Go asynq 格式 …\n创建按队列的速率限制\n创建按任务类型的速率限制\n处理时间（用于延迟任务）\n延迟处理时间（相对于当前时间）\n队列名称\n速率限制配置\n保留期限\n重试策略\n任务 ID，如果为空则自动生成\n任务超时\n唯一任务的 TTL\n窗口大小（秒） Window size (seconds)\n基础延迟\n基础延迟\n是否添加随机抖动\n最大延迟\n最大延迟\n乘数\n步进值\nRedis 经纪人实现 Redis broker implementation\n将任务添加到指定组。 Add a task to a specified …\n将任务以唯一方式添加到指定组。 Add a task …\n聚合任务组。 Aggregate a group of tasks.\n检查聚合条件是否满足 - Go: AggregationCheck\n获取所有队列名称 Get all queue names\n归档任务。 Archive a task.\n归档所有聚合任务 - Go: ArchiveAllAggregatingTasks\n归档所有等待任务 - Go: ArchiveAllPendingTasks\n归档所有重试任务 - Go: ArchiveAllRetryTasks\n归档所有调度任务 - Go: ArchiveAllScheduledTasks\n归档单个任务 - Go: ArchiveTask\n订阅任务取消事件 - Go: CancelationPubSub\n检查速率限制 Check rate limit\n清理死掉的服务器。 Cleanup dead servers.\n删除 scheduler entries 数据，兼容 Go 版 asynq …\n清除服务器状态 - Go: ClearServerState\n关闭连接。 Close the connection.\n使用 CURRENT_STATS_CMD …\n…\n使用 DELETE_AGGREGATION_SET_CMD 脚本删除聚合集合 …\n关闭聚合集合 - Go: CloseAggregationSet\n删除所有聚合任务 - 使用脚本 - Go: …\n删除所有归档任务。 Delete all archived tasks.\n删除所有已完成任务 - Go: DeleteAllCompletedTasks\n删除所有待处理任务。 Delete all pending tasks.\n删除所有重试任务。 Delete all retry tasks.\n删除所有调度任务。 Delete all scheduled tasks.\n删除过期的已完成任务。 Delete expired completed …\n删除任务。 Delete a task.\n从队列中取出任务。 Dequeue a task from the queue.\n标记任务为完成。 Mark a task as done.\n将任务加入队列。 Enqueue a task into the queue.\n将任务以唯一方式加入队列，确保在给定的 …\n延长任务处理租约 - Go: ExtendLease\n转发就绪任务到待处理队列。 Forward ready …\nReturns the argument unchanged.\n获取聚合集合 - Go: AggregationSets\n获取所有队列的统计信息。 Get statistics of all …\n获取异步连接 Get asynchronous connection\n获取历史统计信息。 Get historical statistics.\n获取 PubSub 连接 Get PubSub connection\n获取队列信息。 Get queue information.\n获取队列各状态任务数量 Get task counts for each …\n获取队列统计信息。 Get queue statistics.\n获取所有队列的名称。 Get the names of all queues.\n获取任务结果。 Get task result.\n获取指定服务器的信息。 Get information of a …\n获取所有服务器信息。 Get information of all …\n获取单个任务的详细信息（返回TaskMessage） …\n获取任务信息。 Get task information.\n获取组统计信息 - 使用脚本 - Go: GroupStats Get …\n心跳检测。 Heartbeat detection.\n获取历史统计信息 - 使用脚本 - Go: …\nCalls <code>U::from(self)</code>.\n检查队列是否被暂停。 Check if a queue is paused.\n获取指定队列的所有组。 Get all groups of the …\n列出租约已过期的任务 - Go: ListLeaseExpired\n列出活跃调度器键 - 使用脚本 - Go: …\n获取所有活跃服务节点ID Get all active server IDs\n列出活跃服务器键 - 使用脚本 - Go: …\n获取指定队列的任务ID列表（按状态） Get …\n列出任务。 List tasks.\n列出指定服务器的工作者 - 使用脚本 - Go: …\n标记任务为完成状态 - Go: MarkAsComplete\n获取队列内存使用情况 - 使用脚本 - Go: …\n从RedisConnection创建新的Redis经纪人实例 Create …\n暂停队列。 Pause a queue.\n测试连接。 Ping the server.\n发布任务取消通知 - Go: PublishCancelation\n读取聚合集合中的任务 - Go: ReadAggregationSet\n回收过期的聚合集合 - Go: …\n记录调度事件，兼容 Go 版 asynq Record scheduling …\n恢复孤儿任务。 Recover orphaned tasks.\n删除队列 - Go: RemoveQueue\n重新排队任务。 Requeue a task.\n使用 REQUEUE 脚本将活跃任务重新入队 - Go: …\n重新排队所有归档任务。 Requeue all archived …\n重新排队所有重试任务。 Requeue all retry tasks.\n重新排队所有调度任务。 Requeue all scheduled …\n重试失败的任务 - Go: Retry\n运行所有聚合任务 - 使用脚本 - Go: …\n运行单个任务 - Go: RunTask\n将任务调度到指定时间处理。 Schedule a task to …\n将任务以唯一方式调度，确保在给定的 TTL …\n通过脚本获取所有 SchedulerEntry，兼容 Go 版 …\n通过脚本获取调度事件列表，兼容 Go 版 asynq …\n恢复队列。 Unpause a queue.\n注销服务器。 Unregister a server.\n写入任务结果。 Write task result.\n批量写入 scheduler entries，兼容 Go 版 asynq Batch …\n写入服务器状态 - Go: WriteServerState\nRedis 脚本管理器\n执行脚本\n执行脚本（支持二进制参数）\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取脚本SHA\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n预加载所有脚本\nRedis Lua 脚本集合 - 与 Go 版本完全兼容\n添加到组脚本 - Go: addToGroupCmd <code>KEYS[1]</code> -&gt; asynq:{…\n添加唯一任务到组脚本 - Go: addToGroupUniqueCmd …\nAGGREGATION_CHECK checks the given group for whether to …\n归档任务脚本 - 与 Go 版本兼容 archiveCmd <code>KEYS[1]</code>…\n归档所有任务脚本 - Go: archiveAllCmd archiveAllCmd …\n归档所有聚合任务脚本 - Go: …\n归档所有等待任务脚本 - Go: archiveAllPendingCmd …\n归档任务脚本 - Go: archiveTaskCmd archiveTaskCmd is …\n清理过期任务脚本 - 与 Go 版本兼容 参数: …\n清除服务器状态脚本 - Go: clearServerStateCmd …\nGo currentStatsCmd <code>KEYS[1]</code> -&gt;  asynq:<code>&lt;qname&gt;</code>:pending …\n<code>KEYS[1]</code> -&gt; asynq:{<code>&lt;qname&gt;</code>}:g:<code>&lt;group_name&gt;</code>:&lt;…\n删除所有任务脚本 - Go: deleteAllCmd deleteAllCmd …\n删除所有聚合任务脚本 - Go: …\n删除所有等待任务脚本 - Go: deleteAllPendingCmd …\n删除过期完成任务脚本 - Go: …\n删除任务脚本 - Go: deleteTaskCmd Input: <code>KEYS[1]</code> -&gt; …\n出队任务脚本 - Go: dequeueCmd <code>KEYS[1]</code> -&gt; asynq:{…\n完成任务脚本 - Go: doneCmd <code>KEYS[1]</code> -&gt; asynq:{<code>&lt;qname&gt;</code>…\n完成唯一任务脚本 - Go: doneUniqueCmd <code>KEYS[1]</code> -&gt; …\n入队任务脚本 - 基于 Go 版本的 enqueueCmd <code>KEYS[1]</code>…\n入队唯一任务脚本 - 基于 Go 版本的 …\n延长租约脚本 - Go: ExtendLease <code>KEYS[1]</code> -&gt; lease key …\n转发脚本 - Go: forwardCmd <code>KEYS[1]</code> -&gt; source queue …\n转发重试任务脚本 - 与 Go 版本兼容 参数: …\n转发调度任务脚本 - 与 Go 版本兼容 参数: …\n获取任务信息脚本 - Go: getTaskInfoCmd Input: …\n组统计脚本 - Go: groupStatsCmd <code>KEYS[1]</code> -&gt; asynq:{…\n历史统计脚本 - Go: historicalStatsCmd <code>KEYS[1]</code> -&gt; …\n列出租约过期脚本 - Go: listLeaseExpiredCmd <code>KEYS[1]</code> …\n列出消息脚本 - Go: listMessagesCmd <code>KEYS[1]</code> -&gt; asynq:{…\n列出调度器键脚本 - Go: listSchedulerKeysCmd <code>KEYS[1]</code>…\n列出服务器键脚本 - Go: listServerKeysCmd <code>KEYS[1]</code> …\n列出工作者脚本 - Go: listWorkersCmd <code>KEYS[1]</code> -&gt; …\n列出有序集合条目脚本 - Go: listZSetEntriesCmd …\n标志完成任务脚本 - Go: markAsCompleteCmd <code>KEYS[1]</code> …\n标记唯一任务完成脚本 - Go: …\n内存使用脚本 - Go: memoryUsageCmd <code>KEYS[1]</code> -&gt; asynq:{…\n速率限制脚本 - 滑动窗口实现 参数: <code>KEYS[1]</code> = …\n<code>KEYS[1]</code> -&gt; asynq:{<code>&lt;qname&gt;</code>}:g:<code>&lt;group_name&gt;</code>:&lt;…\n回收陈旧聚合集合脚本 - Go: …\n<code>KEYS[1]</code> -&gt; asynq:{<code>&lt;qname&gt;</code>}:aggregation_sets\n记录调度器入队事件脚本 - Go: …\n恢复孤儿任务脚本 - 与 Go 版本兼容 参数: …\n删除队列脚本 - Go: removeQueueCmd removeQueueCmd …\n强制删除队列脚本 - Go: removeQueueForceCmd …\n重新入队脚本 - Go: requeueCmd <code>KEYS[1]</code> -&gt; asynq:{…\n重试任务脚本 - Go: retryCmd Retry task script - Go: …\n运行所有任务脚本 - Go: runAllCmd <code>KEYS[1]</code> -&gt; asynq:{…\n运行所有聚合任务脚本 - Go: runAllAggregatingCmd …\n运行任务脚本 - Go: runTaskCmd runTaskCmd is a Lua …\n调度任务脚本 - 基于 Go 版本的 scheduleCmd …\n调度唯一任务脚本 - Go: scheduleUniqueCmd <code>KEYS[1]</code> …\n写入调度器条目脚本 - Go: writeSchedulerEntriesCmd …\n写入服务器状态脚本 - Go: writeServerStateCmd …\nRedis 连接类型 Redis connection types\n单机连接 Standalone connection\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the current Redis database number\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n创建单机连接 Create a standalone connection\nRepresents a periodic task to be scheduled.\n周期性任务调度器\ncron 表达式\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n查询所有注册的 SchedulerEntry，兼容 Go 版 asynq …\n查询调度历史事件，兼容 Go 版 asynq Inspector\n列出所有任务的名称\n任务名称，作为唯一标识\n初始化 Scheduler，自动生成 id，设置心跳间隔\n创建一个新的 PeriodicTask 实例\n创建一个带选项的 PeriodicTask 实例\n下次执行时间\n任务选项\n解析选项字符串为 TaskOptions Parse option strings …\n任务负载\n任务队列\n添加一个周期性任务，并通过 rdb 写入 …\ncron 调度对象\n生成与 Go 版一致的调度选项字符串 Generate …\n注销/移除一个周期性任务（按 …\nServeMux - 任务路由多路复用器 ServeMux - Task …\nReturns the argument unchanged.\n注册异步处理函数 Register an asynchronous handler …\n注册同步处理函数 Register a synchronous handler …\nCalls <code>U::from(self)</code>.\n创建新的 ServeMux Create a new ServeMux\n异步函数式处理器适配器 Asynchronous functional …\n任务处理器特性 Task handler trait\n函数式处理器适配器 Functional handler adapter\nAsynq 服务器，负责处理任务 Asynq server, …\n服务器构建器 Server builder\n添加队列 Add queue\n构建服务器 Build the server\n设置并发数 Set concurrency\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n返回组合 server id (hostname:pid:uuid) —— …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n创建新的函数式处理器 Create a new functional …\n创建新的异步函数式处理器 Create a new …\n创建新的服务器实例 Create a new server instance\n创建新的服务器构建器 Create a new server builder\nPing Redis 连接 Ping Redis connection\n处理任务 Process a task\n设置 Redis 配置 Set Redis configuration\n运行服务器直到收到停止信号 Run the server …\n设置服务器配置 Set server configuration\n设置组聚合器 Set group aggregator\n关闭服务器 Shutdown the server\n启动服务器 Start the server\n停止服务器 Stop the server\n每日统计信息 Daily statistics information\n队列信息 - 对应 Go 的 QueueInfo Queue information - …\n队列统计信息 Queue statistics\n表示要执行的工作单元的任务 Represents a task …\n任务信息，描述任务及其元数据 Task …\n活跃任务数 Number of active tasks\n活跃任务数 Number of active tasks\n聚合中任务数 Number of aggregating tasks\n聚合中任务数 Number of aggregating tasks\n已归档任务数 Number of archived tasks\n已归档任务数 Number of archived tasks\n已完成任务数 Number of completed tasks\n已完成任务数 Number of completed tasks\n完成时间 Completion time\n每日统计 Daily statistics\n日期 Date\n任务截止时间 Task deadline\n失败的任务数 Number of failed tasks\n今日失败任务数 Number of tasks failed today\n失败任务总数 Total number of failed tasks\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n从 Protocol Buffer 消息创建任务信息 Create task …\n生成任务 ID Generate task ID\n生成唯一键 - 使用与 redis.rs 中 unique_key …\n获取任务负载 Get task payload\n获取任务类型 Get task type\n任务组 Task group\n任务组数量 Number of task groups\n任务标识符 Task identifier\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n是否为孤儿任务 Whether the task is an orphan\n上次失败的错误信息 Error message from the last …\n上次失败时间 Time of the last failure\n延迟（任务从入队到开始处理的平均时间） …\n任务最大重试次数 Maximum retry attempts for the …\n内存使用量（字节） Memory usage (in bytes)\n队列名称 Queue name\n创建新任务 Create a new task\n下次处理时间 Next processing time\n任务选项 Task options\n是否暂停 Whether paused\n任务负载数据 Task payload data\n任务负载数据 Task payload data\n等待中任务数 Number of pending tasks\n等待中任务数 Number of pending tasks\n处理的任务数 Number of processed tasks\n今日处理任务数 Number of tasks processed today\n处理任务总数 Total number of processed tasks\n任务所属的队列名称 Queue name to which the task …\n队列名称 Queue name\n队列名称 Queue name\n任务结果 Task result\n保留期限 Retention period\n任务已重试次数 Number of times the task has been …\n重试任务数 Number of retry tasks\n重试任务数 Number of retry tasks\n已调度任务数 Number of scheduled tasks\n已调度任务数 Number of scheduled tasks\n队列大小（所有状态任务的总数） Queue size …\n任务状态 Task state\n任务类型名称 Task type name\n任务类型 Task type\n任务超时时间 Task timeout duration\n统计时间戳 Statistics timestamp\n转换为 Protocol Buffer 消息 Convert to Protocol …\n设置任务截止时间 Set task deadline\n设置任务组 Set task group\n设置组聚合宽限期 Set group aggregation grace period\n设置最大重试次数 Set maximum retry attempts\n设置任务选项 Set task options\n设置绝对处理时间 Set absolute processing time\n设置相对延迟 Set relative delay\n设置队列名称 Set queue name\n设置速率限制 Set rate limit\n设置完成结果保留时间 Set retention time for …\n设置重试策略 Set retry policy\n设置任务 ID Set task ID\n设置任务超时 Set task timeout\n设置唯一任务TTL Set unique task TTL")